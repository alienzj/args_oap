#!/usr/bin/perl -w
use strict;

## This programme generate scripts to  ARGs-OAP stage one  for all the metagenomics fastq files 
## in one input directory.
## Modified at Jan. 11th, 2022
## Version 2.4

use Getopt::Std;
use File::Basename;
use FindBin qw($Bin);

##Generalize dir for this program
our (@dirset,$ublastxdir);
BEGIN {
    @dirset = split(/\//,$Bin);
    $ublastxdir = join("/", @dirset);
    unshift @INC, "$ublastxdir/bin";
}


our ($opt_h, $opt_i, $opt_o, $opt_n, $opt_m, $opt_f, $opt_z, $opt_x, $opt_y, $opt_v, $opt_q) = "";
my  $usage = <<USE;
	Author: JIANG Xiaotao
	Date: 12-11-2014
	Version : 2.4
	Modified : 01-11-2022
	$0 -i <Fq input dir> -m <Metadata_map.txt> -o <output dir> -n [number of threads] -f [fa|fq] -z -h -c [S|U]

	-i Input files directory, required
	-m meta data file, required
	-o Output files directory, default current directory
	-n number of threads, default 1
	-f the format of processed files, default fq
	-q quality control of fastq sequences defualt not take effect, set to 1, then will do QC with fastp
	-z whether the fq files were .gz format, if -z, then firstly gzip -d, default(none) 
	-x evalue for searching 16S in usearch default 1e-10
	-y evalue for searching universal single copy marker gene default 3
	-v the identity value for diamond to search the USCMGs default  0.45
	-h print this help information
USE

#Get all the input parameters

getopts('i:o:n:f:m:x:y:v:hzq');
if($opt_h  ||  ($opt_i eq "") ){
	die "$usage\n";
}

$opt_n ||= 1;
$opt_f ||="fq";
$opt_o ||= ".";
unless(-d $opt_o){
	`mkdir $opt_o`;
}

$opt_x ||= 1e-10;
$opt_y ||= 3;
$opt_v ||= 0.45;
my $eval1 =$opt_x;
my $eval2 =$opt_y;
my $did = $opt_v; ##identity for diamond searching

my $logF = "$opt_o/Log.txt";
my $date = localtime;
open(LOG, ">$logF") || die "Can not create Log.txt\n";
print LOG "Start Ublastx one : $date\n";
#$opt_c
my $ARDB_PATH ||= "$ublastxdir/DB/SARG.2.2.diamondv0.9.24.dmnd"; ##change to the new one
my $opt_d ||= $ARDB_PATH; ## This option is to replace the version of database, such as new and old SARG database, or other heirachical database with similar format 
my $ggnr85 ||= "$ublastxdir/DB/gg85_yinxiaole.fasta";

##Adding database files for copy number corrction for -c U
my $KO30DMD ||= "$ublastxdir/DB/KO30_DIAMOND.dmnd";
my $genekolist ||="$ublastxdir/DB/all_KO30_name.list";


##Get all the fastq in input dir
##Generate output script files for all fastq
$date =~ s/\s+/-/g;

my $o_sh = "$opt_o/ublastx_bash_$date.sh";
unless(-d $opt_o){
	`mkdir $opt_o`;
}
open(BASH, ">$o_sh") || die "output dir can not write:\n"; 

my $count = 1;

##--------------------------------------------------------------------------------------------------------
##1. Check the files processed. 
##hash %samples store all samples information 
$date = localtime;
print LOG "1. Check the files processed : $date\n";

my %samples;
my %metainfo;
#my %singlepair;  ##single_end or pair_end
die "$!\n" unless open(META,"$opt_m");
<META>;
while(<META>){
	chomp;
	my $info = $_;
	my @tem = split("\t", $_);
	$samples{$tem[0]} = $tem[1];
	$metainfo{$tem[0]} = $info;
}#
close META;

##--------------------------------------------------------------------------------------------------------
##2. Process files and generate shell scripts for running
##Read meta_data and check all the fastq and fasta gzip  files
$date = localtime;
print LOG "2. Process files and generate shell scripts for running : $date\n";

my %sample16s; #this hash store 16S number of each sample 

for my $fq (sort {$a <=> $b } keys %samples){

	##process each sample separately 
	print BASH "#Processing fq $fq begain:\n";
	
	my ($f1,$f2) = ("","");
	if($opt_f eq "fq"){
		if($opt_z){				
			$f1 = "$opt_i/$samples{$fq}_1.fq.gz";
			$f2 = "$opt_i/$samples{$fq}_2.fq.gz";
			die "No $f1\t$f2\n" unless(-e $f1 && -e $f2);
			print BASH "gzip -f -d $f1\n";
			print BASH "gzip -f -d $f2\n";
			$f1 = "$opt_i/$samples{$fq}_1.fq";
			$f2 = "$opt_i/$samples{$fq}_2.fq";
	
			##if quality control needed using fastp to do it
			if($opt_q){
				my $fo1 = "$opt_i/$samples{$fq}.fastp.1.fq";
				my $fo2 = "$opt_i/$samples{$fq}.fastp.2.fq";
				print BASH "$ublastxdir/bin/fastp -i $f1 -I $f2 -o $fo1 -O $fo2 -w $opt_n -j $opt_i/$samples{$fq}.jason -h $opt_i/$samples{$fq}.html\n";
				$f1 = $fo1;
				$f2 = $fo2;
				
			}

		}else{
			$f1 = "$opt_i/$samples{$fq}_1.fq";
			$f2 = "$opt_i/$samples{$fq}_2.fq";
			##Need to transform fq to fa		
			die "No $f1\t$f2\n" unless(-e $f1 && -e $f2); 		

			if($opt_q){
				my $fo1 = "$opt_i/$samples{$fq}.fastp.1.fq";
				my $fo2 = "$opt_i/$samples{$fq}.fastp.2.fq";
				print BASH "$ublastxdir/bin/fastp -i $f1 -I $f2 -o $fo1 -O $fo2 -w $opt_n -j $opt_i/$samples{$fq}.jason -h $opt_i/$samples{$fq}.html\n";
				$f1 = $fo1;
				$f2 = $fo2;
				
			}

		}

		##Fq -> fa
		my $fa1 = "$opt_i/$samples{$fq}_1.fa";
		my $fa2 = "$opt_i/$samples{$fq}_2.fa";

		print BASH "perl  $ublastxdir/bin/Fq2fa.pl $f1 $fa1\n";
		print BASH "perl  $ublastxdir/bin/Fq2fa.pl $f2 $fa2\n";
		
		$f1 = $fa1;
		$f2 = $fa2;	##Read Files and keep $f1 $f2 store fa name


	}elsif( $opt_f eq "fa"){
		$f1 = "$opt_i/$samples{$fq}_1.fa";
		$f2 = "$opt_i/$samples{$fq}_2.fa";
		die "No $f1\t$f2\n" unless(-e $f1 && -e $f2);
	}else{
		die "Wrong format, files were not end with fa or fq\n";
	}##Fq->fa


	my $uso1 = "$opt_o/$samples{$fq}_1.us";
	my $uso2 = "$opt_o/$samples{$fq}_2.us";
	my $us161 = "$opt_o/$samples{$fq}_1.sam";
	my $us162 = "$opt_o/$samples{$fq}_2.sam";
	#my $f1fixed = "$opt_o/$samples{$fq}_fixed_1.fa";
	#my $f2fixed = "$opt_o/$samples{$fq}_fixed_2.fa";
	#my $sing = "$opt_o/$samples{$fq}_singletons.fa";


	##do usearch against ARDB to extract potential ARG reads
    #print BASH "$ublastxdir/bin/usearchv8 -ublast $f1 -db $opt_d -evalue 1e-5 -accel 0.5 -blast6out $uso1 -threads $opt_n -maxaccepts 1\n";
    print BASH "$ublastxdir/bin/diamondv0.9.24 blastx -d $opt_d -q $f1 -o $uso1 -e 10 -p $opt_n -k 1 --id 60 --query-cover 15\n";
    #print BASH "$ublastxdir/bin/usearchv8 -ublast $f2 -db $opt_d -evalue 1e-5 -accel 0.5 -blast6out $uso2 -threads $opt_n -maxaccepts 1\n\n";
    print BASH "$ublastxdir/bin/diamondv0.9.24 blastx -d $opt_d -q $f2 -o $uso2 -e 10 -p $opt_n -k 1 --id 60 --query-cover 15\n";
        
    ##do usearch against greengene nr90 database to calculate 16S copies number
    #print BASH "$ublastxdir/bin/usearchv8 -ublast $f1 -db $ggnr85 -evalue $eval1 -accel 0.5 -blast6out $us16s1 -threads $opt_n -strand both  -maxaccepts 1\n";
    #print BASH "$ublastxdir/bin/usearchv8 -ublast $f2 -db $ggnr85 -evalue $eval1 -accel 0.5 -blast6out $us16s2 -threads $opt_n -strand both  -maxaccepts 1\n\n";
    # print BASH "$ublastxdir/bin/bbmap/repair.sh in1=$f1 in2=$f2 out1=$f1fixed out2=$f2fixed outs=$sing repair\n";
    # print BASH "$ublastxdir/bin/minimap2 -ax sr $ggnr85 $f1fixed $f2fixed >$us16\n";
    print BASH "$ublastxdir/bin/minimap2 -ax sr $ggnr85 $f1 >$us161\n";
    print BASH "$ublastxdir/bin/minimap2 -ax sr $ggnr85 $f2 >$us162\n";


	##extract potential reads for each sample
	my $e1fa = "$opt_o/$samples{$fq}.extract_1.fa";
	my $e2fa = "$opt_o/$samples{$fq}.extract_2.fa";
	print BASH "$ublastxdir/bin/extract_usearch_reads.pl $uso1 $f1 $e1fa\n";
	print BASH "$ublastxdir/bin/extract_usearch_reads.pl $uso2 $f2 $e2fa\n";

	##Obtain microbial community by 16S hyper variable informaton in shotgun metagenomics data
	##This option is heavy locading in computation
	
    ##using the USCMGs method to get the cell number 
    my $dmd1out = "$opt_o/$samples{$fq}.uscmg_1.dmd"; 	
	my $dmd2out = "$opt_o/$samples{$fq}.uscmg_2.dmd";
	my $dmout = "$opt_o/$samples{$fq}.uscmg.blastx.txt";
	
	print BASH "\n#Using Diamond to search USCMGs\n";
	print BASH "$ublastxdir/bin/diamond blastx -q $f1 -d $KO30DMD -o $dmd1out -f tab  -p $opt_n -e $eval2  --id $did --max-target-seqs 1\n";		
	print BASH "$ublastxdir/bin/diamond blastx -q $f2 -d $KO30DMD -o $dmd2out -f tab  -p $opt_n  -e $eval2 --id $did --max-target-seqs 1\n";		
	print BASH "cat $dmd1out $dmd2out > $dmout\n"
			


}##for process each sample separately

##--------------------------------------------------------------------------------------------------------
##3. Paralell running of tasks
print BASH "#The script file is $o_sh\n";
$date = localtime;
print LOG "3. running of tasks: $date\n";
##excute the program

## 4 Merge  extracted fasta and update meta data 
##---------------------------------------------------------------------------------------------------------------
$date = localtime;
print LOG "4 Merge  extracted fasta and update meta data : $date\n";

my $metaout = "$opt_o/meta_data_online.txt";
my $extractfa = "$opt_o/extracted.fa";
#option -c do copy number correction

print BASH "$ublastxdir/bin/merge_extracted_fa_update_metadate.v2.3.2.pl $opt_i $opt_o $opt_m $metaout $extractfa U $genekolist\n";

close BASH;

`sh $o_sh  > ublastx.log.txt`;

$date = localtime;
print LOG "5. Finsh Ublastx one: $date\n";
close LOG;


1;
__END__
